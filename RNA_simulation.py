"""A model of sequence divergence on a holey fitness landscape based on RNAfolding to simulate the accumulation of Dobzhansky-Muller incompatibilities(DMIs)."""__author__ = 'Ata Kalirad, Ricardo B. R. Azevedo'import osimport picklefrom copy import *from itertools import *import numpy as npimport pandas as pd# ViennaRNA package python bindingsimport RNA as RNA# globalRNA_nucl = ['A', 'C', 'G', 'U']# dict storing the secondary structures of RNA sequences during divergenceRNA_folding_dict = {}np.random.set_state(('MT19937', np.array([    3691495208, 2881111814, 3977485953,  126022579, 1276930617,     355103692, 3248493791, 3009808844,  612188080,  248004424,    1489588601,  173474438, 4039752635, 2508845774, 2622234337,    2700397831, 1811893199, 2190136060, 2315726008, 1162460778,    2341168633,  236659960, 3175264097, 3400454537,  427729918,    4066770621,  567157494, 4014767970, 2930740323,  378300123,    2705662117, 3891078126, 1960649845, 3044656210,  882045208,    1570375463, 2086686192,  407452463, 2030931525, 2734889467,    3712254193, 3949803070,  764947052, 2833180084, 2612938943,    3513858645, 1012338082, 1723965053,   40253333, 3097240011,    3472905330,  563287754,  704858225,  610145833, 2824639775,    3671030693,  225662685, 4093017874,  488496843, 3011853058,    3141429748, 2892388748, 1752852512, 1097583623, 3335701968,    2741138771, 2366687650, 2909722827, 3896701472, 2855844360,      14740992,  126288255,  556395335, 3606698449, 1990092369,    1892289888, 1025326265, 3335170268, 2955298765, 2086040311,    2644433388, 1986237624,  831065590, 2567078834, 3535829239,    1597256603,  781977323, 2945733169, 3479378352, 3652557111,    1100223342,  235212556, 2599186570,  899620665,  675417868,    1297279698, 3980368873, 1671894382, 3219957975,  129492647,     369423255, 1887390651,  536695139, 3467326731,  577893063,    3628585169, 2772043849,  369219244, 1271097627, 1346409244,    2331891903,   39930497, 2068899034,  539572370, 4195007861,    3495378688, 3377756157, 2835342219, 3699793011, 3321615441,    2211559076, 2398792755, 2796307031,  818646352,  355446500,    2946711801, 1049957619,  561188288, 2829760282,   55894884,    1568204679, 1764468784, 1959965565, 4065967902, 3887804509,    3833073650, 3717783102, 1837449653,  528963116, 4121548680,    2402147957, 2202929313,  747086954, 3205182257, 1631864764,     858833100,  148465241,   17458708, 2148761251, 3002919548,    3773743659, 2611894356, 2275521209, 3027905006, 2234470309,    2709870512, 1052969526, 3035329785,  110428213, 2893701759,    2512125031, 3045322315, 2322452091, 3576747394, 2006737455,     124047895, 3870223050, 3757797920,  698743578,  701653240,    3561309206,   39541368, 2659965257, 3356207001,  698671102,    1967130233, 3584965340, 3302789650,  104792115,  989737788,    1289315250, 2742066874,  943135962, 2610987463, 4156696495,    1957093316, 1880989243,  211024555, 1594171485, 2646518040,    1391570537, 2982210346, 3225750783, 1452478140, 1063288625,    2782363442,  333182057, 2864780704, 3890295634, 1022925971,     226535384, 2132360150,   74977604, 4208008791, 1697651592,    4029637378,  397828762, 2954491996, 1120498466, 3197759375,    2646537589, 2903140119,  580234113, 2324229766, 1485090247,    3173462698, 1441000100, 3212564317,  598271368, 1052134622,    2751284206, 4040281713, 2630844601, 1921303308,  861775468,    3522939180, 2855935558, 3227004083, 4121725263,  805407916,    1207185676,  785322196, 3104463214, 3070205549, 1984686779,       5199855, 2585264490, 3703002136, 3352578045,  257641487,    1613285168, 3845545412, 2884412656, 3795140597, 2864082431,    1708426814,  661272124, 3359489670, 2989690080, 1120054048,    3029239860, 2037244341, 3411962036, 3468887812, 1294329307,    1967939294, 1668712931, 1560596708, 2986374405, 3266952874,    1758277657, 3876598642, 1149698899, 1548677880, 2464327872,     466262570, 2573332645, 3577605405, 3511489634, 3001210402,    4047160993, 1096981688, 1365437714,  967187969, 2651685599,    4258218418,  618336653, 1813338507, 4161534170, 1206855048,    3766692676, 1984622584, 1256641952, 2293866774, 2566572107,    1296931689,  202959755, 3331103372, 3095866549, 1832670718,    3588629070,  533366259,  301078755, 1299816886, 2612908898,    1142385071, 4044229138,  392786907, 1473264101,  171872184,    2873022820, 1878820461,   88690985, 3019565333, 2121461097,    1522107992, 1733374438, 2311932879,  556408593, 1461835210,    1423528436,  819211315,  889069790, 3086689727, 1730639543,    1216615289, 2492159266, 1809961698, 1659780200, 3125102201,    1711752707, 2723337471, 2521518355, 3884672928, 1313721188,    1901655237, 3962083231,  757934816, 2196008247, 2111842931,    2965600004, 1312840433, 3455017541,  545137641, 2279641585,    2939005091, 1537081838, 2463922331, 1996015762, 1196027276,     906621855, 1704400250,   76236737,  136244169,  619138087,      98595120,  719278264, 1334390246, 3171154143, 1280182795,    2215843496, 2676742417, 2197843524, 1396698993,  609335212,     723295525, 3605167513, 4155694342, 3017089897, 1955520678,    4067049686, 3239743094, 1221155545, 4095319239,  425400349,    1806147353, 3671105575,  627163234, 1861707767,  274296576,     638507216, 1649469686,  608691281, 4232809768,  611030651,     853789168, 1733062866,  540453354,   11996619, 2695864391,    2050310856,  141509199,  252149019, 3547463915,  329855083,    2856249739, 3735981321, 2875626876, 2379144635,   13062386,    1562227109, 1191505353, 3203340427, 2778675184, 2770557127,    3644383877, 1790071106, 2240228460, 1676798968,  863141840,    1175886689, 1178806726,  358678487, 3328835908, 2633561969,    4074930335,  772447425, 3430950121, 3352113867,  701629620,      25420967, 3791888554, 1412926413,  791735289,  161600651,     506627594, 4220683170,  539553216,  176491711,  870303302,    2405928427,  673609577,  616683903, 2009922698, 2088461621,     631204850,  495792565, 1105952597, 1332646700,   23124919,    2539330986, 1231655942, 1860851071, 3651186456, 2775290123,    3681258608,  637100105, 4220549846, 3186875083, 3856908269,    3867761132, 3985657986, 4173577631,  552539584, 2204479092,    4165177831, 2396591349, 3474222162, 2920321345, 3906718099,     515536637,  991766590, 2116510279,  482084635, 4005496942,     374235227, 1711760850, 3750465691,  101652558, 3589303631,    1360138030, 1382922742,  340163774, 2692240084, 2626346609,    3041178492, 3616792294,  699158099, 1180482576, 3504356230,    1897868877,  464615571, 3149754153, 2219112250, 2421357980,    3182082688, 3145015709, 2579307737, 3490881071, 2970802492,    3235037551, 1994684505,  355293861, 2682386071, 1408942224,    3272168205, 3715571520,  476379336, 3644917929,  666542692,    2680727545,  560661664, 1022989241,  806139402,  495605276,     462775794, 2795097035, 1348129402, 4137368209, 2768709750,    2129930451,  422284347, 1297682726, 1252742143, 3031031382,      75134366, 3411139976, 1654986716,  532012083, 1253013106,    1814002341,  584805750, 4151151859,  279516416, 2068669679,    1452548111,  255585988, 2731877417,  805942443, 3209104026,    1105115396, 1929339947, 3829736722, 2980275336, 2169476831,     784792828, 3572862771, 1057808935, 1774004947, 3086076921,     969435958, 4291618669,  892653473, 2713995907, 2137887400,    2565641007, 1417836736,  415508859, 1624683723,   23763112,     518111653, 2355447857, 2023934715,  934168085, 2250448450,     450387908, 1069332538, 4170085337, 2145735300, 2298032455,    1437026749, 2863147795, 3273446986, 1979692197, 3208629490,    2080357079,  584771674, 1802076639, 2018580439, 4261231470,    1708636029, 3602321445,   18885205, 1940272685, 4187271341,    1647123067, 1450487947, 3463781280, 3759557524,  493883757,    3901885447, 3190687437,  742916954, 3176758487, 3010187255,     936898923, 1805555016, 1981187811, 1196213096, 3067885662,    2550095824, 3396199635, 3614915928, 1977375679, 2173583078,    2643789240, 2587955166, 2158941995, 2347766906, 1711205114,      66633020, 3977356823, 1510661526, 3048960083,   51672689,    3596587592, 4038438382, 4019922490, 2146383929, 1692948176,    1233895739, 3938222851, 2698966080, 2950467396, 1878048591,    3547155317, 3627364723,  906814924, 1075129814, 3302437944,    2756803960, 2719380291, 1774084191, 2789415893, 4095723844,    1297221824, 1938199324, 4112704123, 1741415251, 1105144176,    1259977468,  131064353, 4036118418,  311279014], dtype=np.uint32),    624, 0, 0.0))class RNASeq(object):    """RNA sequence and corresponding minimum free energy (MFE) secondary    structure.    Attributes    ----------    seq : str        Sequence.    struct : str        MFE secondary structure.    mfe : float        MFE.    L : int        Sequence length.    bp : int        Number of base pairs.    """    def __init__(self, seq):        """Initialize RNASeq object from RNA sequence.        Note        ----        Does not check whether sequence contains invalid nucleotides.        Parameters        ----------        seq : str            Sequence.        Examples        --------        >>> seq = RNASeq('UAAAUCGGCGUUCUGCCACAGCAGCGAA')        >>> seq.struct        '........(((((((...))).))))..'        >>> seq.mfe        -4.199999809265137        >>> seq.bp        7        """        self.seq = seq        self.L = len(seq)        self.update_struct()        self.bp = self.struct.count('(')    def update_struct(self):        """Calculate MFE and secondary structure of current RNA sequence.        Check if MFE and secondary structure have already been calculated.        Note        ----        Uses ViennaRNA package.        """        if self.seq in RNA_folding_dict:            self.struct, self.mfe = RNA_folding_dict[self.seq]        else:            mfe_struct = RNA.fold(self.seq)            self.struct, self.mfe = mfe_struct            RNA_folding_dict[self.seq] = mfe_struct    @staticmethod    def random_sequence(L):        """Generate a random RNA sequence of a certain length.        Parameters        ----------        L : int            Sequence length.        Returns        -------        RNASeq            Random sequence.        Examples        --------        >>> L = 100        >>> unfolded = RNASeq('.' * L)        >>> seq = RNASeq.random_sequence(L)        >>> seq.bp == seq.get_bp_distance(unfolded)        True        """        seq_array = np.random.choice(RNA_nucl, size=L)        return RNASeq(''.join(seq_array))    @staticmethod    def mutate(seq, site, nucl):        """Mutate RNA sequence at specific site(s) to specific nucleotide(s).        Note        ----        Does not calculate structure of mutated sequence.        Parameters        ----------        seq : str            RNA sequence.        site : int or list            Site(s).        nucl : str or list            Nucleotide(s).        Returns        -------        str            Mutated sequence        Examples        --------        >>> RNASeq.mutate('AAAAAAA', [0, 1, 4], ['C', 'G', 'U'])        'CGAAUAA'        """        if type(site) == list:            assert len(site) == len(nucl)            for i, j in zip(site, nucl):                seq = seq[:i] + j + seq[i + 1:]            return seq        else:            return seq[:site] + nucl + seq[site + 1:]    @staticmethod    def mutate_random(seq):        """Mutate RNA sequence at a single randomly chosen site to a randomly        chosen nucleotide.        Note        ----        Does not calculate structure of mutant RNA sequence.        Parameters        ----------        seq : str            Sequence.        Returns        -------        str            Mutant RNA sequence.        """        site = np.random.randint(0, len(seq))        nucl = [i for i in RNA_nucl if i != seq[site]]        np.random.shuffle(nucl)        return RNASeq.mutate(seq, site, nucl[0])    @staticmethod    def get_hamdist(seqA, seqB):        """Calculate Hamming distance between two sequences.        Parameters        ----------        seqA : str            Sequence.        seqB : str            Sequence.        Returns        -------        int            Hamming distance.        Examples        --------        >>> seqA = 'UAAAUCGGCGUCCUGCCACAGCAGCGAA'        >>> seqB = 'UAAAUCGGCGUUCUGCCACAGCAGCGAA'        >>> RNASeq.get_hamdist(seqA, seqB)        1        """        assert type(seqA) == type(seqB)        diffs = 0        for ch1, ch2 in zip(seqA, seqB):            if ch1 != ch2:                diffs += 1        return diffs    def diverge(self, other):        """Mutate RNASeq while preventing multiple-hits.  Calculate new        structure.        Exclude sites that have mutated previously by preventing convergence        with another sequence.  Throw exception if sequences are already        completely diverged.        Parameters        ----------        other : RNASeq            RNA sequence self is diverging from.        Raises        ------        ValueError            Sequence cannot diverge any more.        """        ini_dist = self.get_hamdist(self.seq, other.seq)        if ini_dist == self.L:            raise ValueError('The two sequences are already completely diverged.')        fin_dist = ini_dist        while fin_dist != ini_dist + 1:            mut = RNASeq.mutate_random(self.seq)            fin_dist = self.get_hamdist(mut, other.seq)        self.seq = mut        self.update_struct()    @staticmethod    def get_diverged_sites(seq1, seq2):        """Find diverged sites between two sequences.        Parameters        ----------        seq1 : str            Sequence.        seq2 : str            Sequence.        Returns        -------        tuple            Three elements:            seq1_nucls: list                Diverged nucleotides on seq1.            seq2_nucls: list                Diverged nucleotides on seq2.            sites: list                sites of diverged sites.        Examples        --------        >>> seqA = 'UAAAUCGGCGUCCUGCCACAGCAGCGAA'        >>> seqB = 'UAAAUCGGCGUUCUGCCACAGCAGCGAA'        >>> RNASeq.get_diverged_sites(seqA, seqB)        (['C'], ['U'], [11])        """        assert len(seq1) == len(seq2)        seq1_nucls = []        seq2_nucls = []        sites = []        for i in range(len(seq1)):            if seq1[i] != seq2[i]:                seq1_nucls.append(seq1[i])                seq2_nucls.append(seq2[i])                sites.append(i)        return seq1_nucls, seq2_nucls, sites    @staticmethod    def introgress(recipient, donor, n_introgr):        """Construct all possible introgressions of between 1 and 4 diverged        nucleotides from a donor sequence to a recipient sequence.        Parameters        ----------        recipient : str            Sequence.        donor : str            Sequence.        n_introgr : int            Number of nucleotides to introgress.        Returns        -------        list            Introgressed genotypes.        Examples        --------        >>> RNASeq.introgress('AAAAAAA', 'AAUAUAU', 2)        ['AAUAUAA', 'AAUAAAU', 'AAAAUAU']        """        assert len(recipient) == len(donor)        assert 1 <= n_introgr <= 4        indices = []        temp = RNASeq.get_diverged_sites(recipient, donor)        if temp != 0:            indices = temp[2]        introgress = []        if n_introgr == 1:            for i in range(len(recipient)):                if recipient[i] != donor[i]:                    introgress.append(recipient[:i] + donor[i] +                        recipient[i + 1:])        else:            indices_introg = list(combinations(indices, n_introgr))            for i in indices_introg:                if n_introgr == 2:                    introgress.append(recipient[:i[0]] + donor[i[0]] +                        recipient[i[0] + 1:i[1]] + donor[i[1]] +                        recipient[i[1] + 1:])                elif n_introgr == 3:                    introgress.append(recipient[:i[0]] + donor[i[0]] +                        recipient[i[0] + 1:i[1]] + donor[i[1]] +                        recipient[i[1] + 1:i[2]] + donor[i[2]] +                        recipient[i[2] + 1:])                elif n_introgr == 4:                    introgress.append(recipient[:i[0]] + donor[i[0]] +                        recipient[i[0] + 1:i[1]] + donor[i[1]] +                        recipient[i[1] + 1:i[2]] + donor[i[2]] +                        recipient[i[2] + 1:i[3]] + donor[i[3]] +                        recipient[i[3] + 1:])        return introgress    @staticmethod    def recombine(seq1, seq2):        """Generate all recombinants of two RNA sequences resulting from a        single crossover event.        For a sequence of length L, there will be 2 * (L - 1) recombinants.        Parameters        ----------        seq1 : str            Sequence.        seq2 : str            Sequence.        Returns        -------        list            Recombinants.        Examples        --------        >>> RNASeq.recombine('AAAA', 'UUUU')        ['AUUU', 'UAAA', 'AAUU', 'UUAA', 'AAAU', 'UUUA']        """        assert len(seq1) == len(seq2)        recs = []        for i in np.arange(1, len(seq1), 1):            recs.append(seq1[:i] + seq2[i:])            recs.append(seq2[:i] + seq1[i:])        return recs    @staticmethod    def get_neighbors(seq):        """Generate all the mutations needed to specify all single mutation        neighbors of a sequence.        Parameters        ----------        seq : str            Sequence.        Returns        -------        seqs : list            A list of tuples of the form (site, nucleotide).        Examples        --------        >>> RNASeq.get_neighbors('AAA')        [(0, 'C'), (0, 'G'), (0, 'U'), (1, 'C'), (1, 'G'), (1, 'U'), (2, 'C'), (2, 'G'), (2, 'U')]        """        seqs = []        for i in range(len(seq)):            for j in RNA_nucl:                if j != seq[i]:                    seqs.append((i, j))        return seqs    def get_bp_distance(self, other):        """Calculate base-pair distance between the secondary structures of        two RNA sequences.        Note        ----        Uses ViennaRNA package.        Parameters        ----------        other : RNASeq        Returns        -------        int            Base-pair distance.        Examples        --------        >>> seq1 = RNASeq('UAAAUCGGCGUCCUGCCACAGCAGCGAA')        >>> seq2 = RNASeq('UAAAUCGGCGUUCUGCCACAGCAGCGAA')        >>> seq1.get_bp_distance(seq2)        13        """        assert type(self) == type(other)        return RNA.bp_distance(self.struct, other.struct)class Evolution(object):    """Simulation of divergence between two sequences on a holey fitness    landscape to simulate the accumulation of DMIs.    Attributes    ----------    ref_seq : RNASeq        Reference sequence.    ancestor : RNASeq        Ancestor.    alpha : int        alpha.    mut_sites : int        Site.    mut_nucls : str        Nucleotide.    mutated_line : str        Lineage.    divergence : list        A list of the Hamming distance between diverging lineages.    mutations : list        A list of mutations occurred during divergence in the form of a tuple,        (old nucleotide, site, new nucleotide).    seq1 : RNASeq        Sequence.    seq2 : RNASeq        Sequence.    lin1 : list        RNASeq objects during evolution of lineage 1.    lin2 : list        RNASeq objects during evolution of lineage 1.    lin1_bp : list        Base-pair distances between lineage 1 and the reference sequence during        evolution.    lin2_bp : list        Base-pair distances between lineage 2 and the reference sequence during        evolution.    avg_mfe : list        Average MFE values of the two lineages during evolution.    p1 : list        Probabilities that a single introgression results in an inviable        sequence during evolution.    p2 : list        Probabilities that a double introgression results in an inviable        sequence during evolution.    p3 : list        Probabilities that a triple introgression results in an inviable        sequence during evolution.    simple_DMI : list        Simple DMIs duting evolution.    single : list        Inviable single introgressions from lineage 2 to lineage 1.    double : list        Inviable double introgressions from lineage 2 to lineage 1.    triple : list        Inviable triple introgressions from lineage 2 to lineage 1.    """    def __init__(self, seq, alpha=12):        """Initialize Evolution object from reference RNA sequence and alpha.        The reference sequence and alpha define the fitness landscape.  A        sequence is viable if its secondary structure (1) has more than alpha        base pairs and (2) is at most alpha base pairs away from the structure        of the reference sequence; a sequence is inviable otherwise.        Set ancestor to reference sequence (no burn-in).        Parameters        ----------        seq : str            Reference sequence.        alpha : int, optional            alpha.        """        self.ref_seq = RNASeq(seq)        self.ancestor = RNASeq(seq)        self.alpha = alpha        assert self.ref_seq.bp > self.alpha    def init_history(self):        """Initialize attributes that will be used to keep a record of the        evolutionary history during evolution.        """        self.divergence = []        self.mutations = []        self.lin1 = []        self.lin2 = []        self.lin1_bp = []        self.lin2_bp = []        self.avg_mfe = []        self.simple_DMI = []        self.p1 = []        self.p2 = []        self.p3 = []        self.single = []        self.double = []        self.triple = []        self.viable_sin_pair = []        self.p1_inv = []        self.p2_inv = []        self.p3_inv = []        self.single_inv = []        self.double_inv = []        self.triple_inv = []        self.viable_sin_pair_inv = []        ###########        #self.single_old = []        #self.double_old = []        #self.triple_old = []    def update_history(self):        """Update evolutionary history.        """        self.lin1.append(self.seq1)        self.lin2.append(self.seq2)        self.lin1_bp.append(self.seq1.get_bp_distance(self.ref_seq))        self.lin2_bp.append(self.seq2.get_bp_distance(self.ref_seq))        self.avg_mfe.append(np.mean((self.seq1.mfe, self.seq2.mfe)))        self.divergence.append(RNASeq.get_hamdist(self.seq1.seq, self.seq2.seq))        self.mutations.append((self.mutated_line, self.mut_sites,            self.mut_nucls))        simple_DMI = self.get_simple_DMIs()        self.simple_DMI.append(simple_DMI)        self.simple_DMI_past_gen = simple_DMI        # Introgression 2 -> 1        temp = self.introgression_assay()        self.p1.append(temp['p1'])        self.p2.append(temp['p2'])        self.p3.append(temp['p3'])        self.single.append(temp['single'])        self.double.append(temp['double'])        self.triple.append(temp['triple'])        self.viable_sin_pair.append(temp['viable_sin_pair'])        # Introgression 1 -> 2        temp = self.introgression_assay(dir=2)        self.p1_inv.append(temp['p1'])        self.p2_inv.append(temp['p2'])        self.p3_inv.append(temp['p3'])        self.single_inv.append(temp['single'])        self.double_inv.append(temp['double'])        self.triple_inv.append(temp['triple'])        self.viable_sin_pair_inv.append(temp['viable_sin_pair'])        #############        #temp = self.get_intogtression_old()        #self.single_old.append(temp['single'])        #self.double_old.append(temp['double'])        #self.triple_old.append(temp['triple'])    @property    def stats(self):        """Generate a dictionary of evolutionary history attributes.        Used by save_stats().        Returns        -------        dict            Evolutionary history.        """        stats = {}        stats['ancestor'] = self.ancestor.seq        stats['ref_seq'] = self.ref_seq.seq        stats['divergence'] = self.divergence        stats['seqs_lin1'] = [i.seq for i in self.lin1]        stats['seqs_lin2'] = [i.seq for i in self.lin2]        stats['lin1_bp'] = self.lin1_bp        stats['lin2_bp'] = self.lin2_bp        stats['mfe_avg'] = self.avg_mfe        stats['simple_DMI'] = self.simple_DMI        stats['p1'] = self.p1        stats['p2'] = self.p2        stats['p3'] = self.p3        stats['single'] = self.single        stats['double'] = self.double        stats['triple'] = self.triple        stats['viable_sin_pair'] = self.viable_sin_pair        stats['p1_inv'] = self.p1_inv        stats['p2_inv'] = self.p2_inv        stats['p3_inv'] = self.p3_inv        stats['single_inv'] = self.single_inv        stats['double_inv'] = self.double_inv        stats['triple_inv'] = self.triple_inv        stats['viable_sin_pair_inv'] = self.viable_sin_pair_inv         ########        #stats['single_old'] = self.single_old        #stats['double_old'] = self.double_old        #stats['triple_old'] = self.triple_old        #######        temp = self.get_RI()        stats['RI'] = temp['RI']        stats['Holeyness'] = self.get_holeyness()        stats['p_est'] = self.estimate_p()        return stats    def save_stats(self, directory, file_ID):        """Save evolutionary history in pickle format.        Parameters        ----------        directory : str            Directory.        file_ID : int            A number added to the file name to avoid overwriting.        Returns        -------        name : pickle            Pickled stat dictionary.        """        if not os.path.exists(directory):            os.makedirs(directory)        file = open(directory + "/stats_" + str(file_ID), 'w')        pickle.dump(self.stats, file)        file.close()    def is_viable(self, seq):        """Evaluate whether a sequence is viable        See Evolve.__init__() for more details.        Parameters        ----------        seq : RNASeq            Sequence.        Returns        -------        bool            Viability.        """        assert type(self.ref_seq) == type(seq)        if seq.bp <= self.alpha:            return False        else:            bp = RNASeq.get_bp_distance(self.ref_seq, seq)            if bp <= self.alpha:                return True            else:                return False    def get_inviable_introgressions(self, recipient, donor, n_introgr):        """Find inviable introgressions from donor sequence to recipient        sequence.        Parameters        ----------        recipient : str            Sequence.        donor : str            Sequence.        n_introgr : int            Number of nucleotides to introgress.        Returns        -------        dict            Inviable introgressions; keys are tuples containing site numbers.        """        introgressions = RNASeq.introgress(recipient, donor, n_introgr)        inviable = {}        for i in introgressions:            seq = RNASeq(i)            if not self.is_viable(seq):                sites = RNASeq.get_diverged_sites(recipient, i)[2]                key = tuple(sites)                inviable[key] = ([donor[site] for site in sites], self.ref_seq.get_bp_distance(seq))        return inviable, len(introgressions)    def introgression_assay(self, dir=1):        """Find single, double, and triple introgressions in which result in an inviable genotype                Parameters        ----------        dir : int, optional            Direction of introgression. '1' tests 2 -> 1 DMIs whereas '2' tests 1 -> 2 DMIs.                Returns        -------        dict            A dictionary of single, double, and triple introgressions in one direction which result in inviable genotypes.                Raises        ------        ValueError            dir can only be '1' or '2'.        """        if dir == 1:            seqA = self.seq1.seq            seqB = self.seq2.seq        elif dir == 2:            seqA = self.seq2.seq            seqB = self.seq1.seq        else:            raise ValueError('Must be either 1 or 2.')        sin, n_sin = self.get_inviable_introgressions(seqA, seqB, 1)        dou, n_dou = self.get_inviable_introgressions(seqA, seqB, 2)        tri, n_tri = self.get_inviable_introgressions(seqA, seqB, 3)        # remove inviable double introgressions that are caused by inviable        # Single introgressions         sin_pairs = list(combinations(sin, 2))        sin_pairs_seqs = [RNASeq.mutate(seqA, [i[0][0], i[1][0]], [sin[i[0]][0][0], sin[i[1]][0][0]]) for i in sin_pairs]        sin_pairs_seqs_w = [self.is_viable(RNASeq(i)) for i in sin_pairs_seqs]        # single introgressions        trimmed_dou = {}        for i in dou:            found = False            for j in sin:                if j[0] in i:                    found = True                    break            if not found:                trimmed_dou[i] = dou[i]        trimmed_dou        # remove inviable triple introgressions that are caused by inviable        # single or double introgressions        trimmed_tri = {}        for i in tri:            found = False            #print 'tri in sin'            for j in sin:                #print j, i                if j[0] in i:                    found = True                    break            if not found:                for j in trimmed_dou:                    if sum([k in j for k in i]) == 2:                        found = True                        break            if not found:                trimmed_tri[i] = tri[i]        if n_sin > 0:            p1 = len(sin) / float(n_sin)        else:            p1 = 0        if n_dou > 0:            p2 = len(dou) / float(n_dou)        else:            p2 = 0        if n_tri > 0:            p3 = len(tri) / float(n_tri)        else:            p3 = 0        return {            'single': sin,            'double': trimmed_dou,            'triple': trimmed_tri,            'p1': p1,            'p2': p2,            'p3': p3,            'viable_sin_pair': np.sum(sin_pairs_seqs_w),        }    def rescue_inviable_introgressions(self, dir, putative_21_DMIs, putative_12_DMIs):        """Find double introgressions from two putative DMIs in lineages 1 and 2 which result in a viable genotype        Parameters        ----------        dir : int            Direction of introgression. '1' tests 2 -> 1 DMIs whereas '2' tests 1 -> 2 DMIs.        putative_21_DMIs : dict            Putative DMIs found through introgression from lineage 2 to 1.        putative_12_DMIs : dict            Putative DMIs found through introgression from lineage 1 to 2.        Returns        -------        dict            A dictionary of putative DMIs that could be rescued via a second introgression.        Raises        ------        ValueError            dir can only be '1' or '2'.        """        if dir == 1:            seqA = self.seq1.seq            seqB = self.seq2.seq            putative_21 = putative_21_DMIs            putative_12 = putative_12_DMIs        elif dir == 2:            seqA = self.seq2.seq            seqB = self.seq1.seq            putative_21 = putative_12_DMIs            putative_12 = putative_21_DMIs        else:            raise ValueError('Must be either 1 or 2.')        rescue = {}        for i in putative_21:            site_i = i[0]            nucl_i = putative_21[i][0][0]            seq_i = RNASeq.mutate(seqA, site_i, nucl_i)            fit_i = self.is_viable(RNASeq(seq_i))            for j in putative_12:                site_j = j[0]                nucl_j = seqB[site_j]                seq_ij = RNASeq.mutate(seq_i, site_j, nucl_j)                fit_ij = self.is_viable(RNASeq(seq_ij))                if fit_ij:                    rescue[tuple(np.sort([site_i, site_j]))] = [(site_i, site_j), (nucl_i, nucl_j)]        return rescue    def get_putative_simple_DMIs(self):        """Find putative simple DMIs.        Returns        -------        dict            Putative simple DMIs defined according to conditions #1-3 discussed            in Kalirad and Azevedo (2016).        """        # single introgressions in both directions        putative_21_DMIs, n_sin_21 = self.get_inviable_introgressions(self.seq1.seq, self.seq2.seq, 1)        putative_12_DMIs, n_sin_12 = self.get_inviable_introgressions(self.seq2.seq, self.seq1.seq, 1)        # rescuing double introgressions in both directions        rescue_12 = self.rescue_inviable_introgressions(1, putative_21_DMIs, putative_12_DMIs)        rescue_21 = self.rescue_inviable_introgressions(2, putative_21_DMIs, putative_12_DMIs)        bi_rescue = set(rescue_12.keys()).intersection(set(rescue_21.keys()))        putative_simple_DMIs = {}        for i in bi_rescue:            putative_simple_DMIs[i] = [(rescue_12[i][0][0], rescue_21[i][0][0]), (rescue_12[i][1][0], rescue_21[i][1][0])]        return putative_simple_DMIs    def get_simple_DMIs(self):        """Find simple DMIs.        Returns        -------        dict            Simple DMIs defined according to conditions #1-6 discussed in            Kalirad and Azevedo (2016).        """        # conditions #1-3        putative_simple_DMIs = self.get_putative_simple_DMIs()        simple_DMIs = {}        for i in putative_simple_DMIs:            # condition #4            ancestral_test = [putative_simple_DMIs[i][1][0] != self.ancestor.seq[putative_simple_DMIs[i][0][0]],\                              putative_simple_DMIs[i][1][1] != self.ancestor.seq[putative_simple_DMIs[i][0][1]]]            if np.sum(ancestral_test) > 0:                # conditions #5-6                if (putative_simple_DMIs[i][0][0] == self.mut_sites and putative_simple_DMIs[i][1][0] == self.mut_nucls)\                or (putative_simple_DMIs[i][0][1] == self.mut_sites and putative_simple_DMIs[i][1][1] == self.mut_nucls)\                or (i in self.simple_DMI_past_gen):                    simple_DMIs[i] = putative_simple_DMIs[i]        return simple_DMIs    def get_inviable_neighbors(self, seq):        """Get inviable sequences that are a single mutation away from a        sequence.        Parameters        ----------        seq : str            Sequence        Returns        -------        int            Number of inviable neighbors.        """        nei = RNASeq.get_neighbors(seq)        inviable = []        for site, nucl in nei:            mut = RNASeq.mutate(seq, site, nucl)            if not self.is_viable(RNASeq(mut)):                inviable.append((site, nucl))        return inviable    def get_holeyness(self):        """Calculate holeyness of all sequences generated during divergence.        The holeyness of a sequence is defined as the proportion of its        mutational neighbors that is inviable.        Returns        -------        float            Holeyness.        """        sim_seqs = []        sim_seqs = [self.ancestor.seq] + [i.seq for i in self.lin1] + \            [i.seq for i in self.lin2]        k = RNASeq.get_hamdist(self.seq1.seq, self.seq2.seq)        assert len(sim_seqs) == 2 * k + 1        total_inv = np.sum([len(self.get_inviable_neighbors(i)) for i in sim_seqs])        return (total_inv - 4. * k) / (3. * self.ref_seq.L * len(sim_seqs) - 4. * k)    def get_inviable_doubles(self, seq):        nei = RNASeq.get_neighbors(seq)        inv_nei = self.get_inviable_neighbors(seq)        viable_nei = list(set(nei).difference(set(inv_nei)))        all_pairs =  [i for i in list(combinations(nei, 2)) if i[0][0] != i[1][0]]        viable_pairs =  [i for i in list(combinations(viable_nei, 2)) if i[0][0] != i[1][0]]        dou_inv = 0        for sin1, sin2 in viable_pairs:            mut = RNASeq.mutate(seq, [sin1[0], sin2[0]], [sin1[1], sin2[1]])            if not self.is_viable(RNASeq(mut)):                dou_inv += 1        return dou_inv/float(len(all_pairs))    def estimate_p(self):        p = []        p.append(self.get_inviable_doubles(self.ancestor.seq))        index = np.arange(0, len(self.lin1) + 1, 5)[1:] - 1        pop = np.random.randint(1, 3)        if pop == 1:            for i in index:                p.append(self.get_inviable_doubles(self.lin1[i].seq))        else:            for i in index:                p.append(self.get_inviable_doubles(self.lin2[i].seq))        return p    def get_RI(self):        """Calculate the level of reproductive isolation (RI).        Returns        -------        dict            RI, recombinant sequences, and mean MFE values of recombinants,            all calculated at each substitution.        """        single_cross_recs = {}        RI = []        w_rec_series = []        mfe_rec_series = []        count = 0        for i, j in zip(self.lin1, self.lin2):            recs = RNASeq.recombine(i.seq, j.seq)            recombinants = [RNASeq(l) for l in recs]            single_cross_recs[count] = recs            w_rec = [self.is_viable(m) for m in recombinants]            RI.append(1. - np.sum(w_rec) / float(len(w_rec)))            mfe_rec_series.append(np.mean([n.mfe for n in recombinants]))            count += 1        return {'RI': RI,                'mfe_rec_series': mfe_rec_series,                'single_cross_recs': single_cross_recs}    def burnin(self, t):        """Evolve ancestor (initially set to equal the reference sequence) for        t (viable) substitutions allowing multiple hits.  Update ancestor at        the end.  Set lineages A and B to ancestor.        Parameters        ----------        t : int            Length of burn-in period.        """        count = 0        while count < t:            fix = 0            while not fix:                mut = deepcopy(self.ancestor)                mut = RNASeq(RNASeq.mutate_random(mut.seq))                fix = self.is_viable(mut)            self.ancestor = mut            count += 1        self.seq1 = deepcopy(self.ancestor)        self.seq2 = deepcopy(self.ancestor)    def substitute(self, pop):        """Allow one lineage to acquire a substitution.        Multiple-hits are not allowed.  (See RNASeq.diverge())        Parameters        ----------        pop : int            Number specifying lineage.  1 for seq1 and 2 for seq2.        Raises        ------        ValueError            pop must be either 1 or 2.        """        if pop == 1:            fix = False            while not fix:                next_gen = deepcopy(self.seq1)                next_gen.diverge(self.seq2)                fix = self.is_viable(next_gen)            self.mut_sites = RNASeq.get_diverged_sites(next_gen.seq, self.seq1.seq)[2][0]            self.seq1 = next_gen            self.mut_nucls = self.seq1.seq[self.mut_sites]            self.mutated_line = '1'        elif pop == 2:            fix = False            while not fix:                next_gen = deepcopy(self.seq2)                next_gen.diverge(self.seq1)                fix = self.is_viable(next_gen)            self.mut_sites = RNASeq.get_diverged_sites(next_gen.seq, self.seq2.seq)[2][0]            self.seq2 = next_gen            self.mut_nucls = self.seq2.seq[self.mut_sites]            self.mutated_line = '2'        else:            raise ValueError('Must be either 1 or 2.')    def evolve(self, divergence=40, burnin=200, verbose=False):        """Subject the reference sequence to a burn-in period, set the ancestor        to the resulting sequence, split it into two lineages, and allow the two        lineages to diverge.        Parameters        ----------        divergence : int, optional            Total number of substitutions.        burnin : int, optional            Length of the burn-in period.        verbose : bool, optional            Print the substitution number.        """        self.init_history()        self.burnin(burnin)        if verbose:            print 'Substitutions:',        myIterator = cycle(range(2))        for i in range(divergence):            self.substitute(pop=myIterator.next() + 1)            self.update_history()            if verbose:                print i + 1,    def substitute_with_multi_hit(self, pop):        """Introduce point mutations into one of the lineages while allowing any locus to undergoe multiple subs.        Parameters        ----------        pop : int            An integer signifying one of the lineages.        Raises        ------        ValueError,            pop must be either 1 or 2.        """        if pop == 1:            fix = False            while not fix:                next_gen = deepcopy(self.seq1)                next_gen = RNASeq(RNASeq.mutate_random(next_gen.seq))                fix = self.is_viable(next_gen)            self.mut_sites = RNASeq.get_diverged_sites(next_gen.seq, self.seq1.seq)[2][0]            self.seq1 = next_gen            self.mut_nucls = self.seq1.seq[self.mut_sites]            self.mutated_line = '1'        elif pop == 2:            fix = False            while not fix:                next_gen = deepcopy(self.seq2)                next_gen = RNASeq(RNASeq.mutate_random(next_gen.seq))                fix = self.is_viable(next_gen)            self.mut_sites = RNASeq.get_diverged_sites(next_gen.seq, self.seq2.seq)[2][0]            self.seq2 = next_gen            self.mut_nucls = self.seq2.seq[self.mut_sites]            self.mutated_line = '2'        else:            raise ValueError, 'Must be either 1 or 2.'    def evolve_with_multi_hit(self, divergence=40, burnin=200, verbose=False):        """Allow the two lineages to diverge while allowing any locus to undergoe multiple subs.        Parameters        ----------        divergence : int, optional            The final hamming distance between the two lineages.        burnin : int, optional            The length of the burnin period.        verbose : bool, optional            print the hamming distance whenever it increases by one.        """        self.init_history()        self.burnin(burnin)        myIterator = cycle(range(2))        d = 0        count = 0        if verbose:            print 'Hamming distance:',        while d < divergence:            self.substitute_with_multi_hit(pop=myIterator.next() + 1)            count += 1            Hamming = RNASeq.get_hamdist(self.seq1.seq, self.seq2.seq)            print Hamming,            if  Hamming == d + 1:                self.update_history()                d += 1                if verbose:                    print Hamming,if __name__ == "__main__":    import doctest    doctest.testmod()